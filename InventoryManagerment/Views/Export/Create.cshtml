@{
    //Export Create
    Layout = "~/Views/Shared/_Layout.cshtml";
    var listProduct = (List<InventoryManagerment.Models.EF.Product>)ViewBag.Product;
    var listUnit = (List<InventoryManagerment.Models.EF.Unit>)ViewBag.Unit;
    var listCustomer = (List<InventoryManagerment.Models.EF.Customer>)ViewBag.Customer;
    var user = (InventoryManagerment.Models.EF.User)Session[InventoryManagerment.Common.CommonConstants.USER_SESSION];
    var db = new InventoryManagerment.Models.EF.InventoryDbContext();
    string addListProduct()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        sb.Append("<script>");
        sb.Append(" var dataProduct = new Array();");
        foreach (var item in listProduct)
        {
            sb.Append($" dataProduct.push('{db.ProductCategories.Find(item.CategoryID).Name} | {item.Name} | {db.Packages.Find(item.PackageID).Name}');");
        }
        sb.Append(" </script>");
        return sb.ToString();
    }
    string addProductModel()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        sb.Append("<script>");
        sb.Append(" var listProduct = new Array();");
        foreach (var item in listProduct)
        {
            decimal price = 0;
            var listProductSupply = db.SupplyDetails.Where(x => x.ProductCode == item.Code).ToList();
            foreach (var items in listProductSupply)
            {
                price += items.Price;
            }
            sb.Append(" var ModelProduct = {};");
            sb.Append($" ModelProduct.Name ='{item.Name}';");
            sb.Append($" ModelProduct.CodeProduct='{item.Code}';");
            sb.Append($" ModelProduct.Quantity='{item.Quantity}';");
            if (listProductSupply.Count != 0)
            {
                sb.Append($" ModelProduct.Price ='{Math.Round((price / listProductSupply.Count), 0)}';");
            }
            else
            {
                sb.Append($" ModelProduct.Price ='{item.Price}';");
            }
            sb.Append($" ModelProduct.UnitID ='{item.UnitID}';");
            sb.Append($" ModelProduct.PackageID ='{item.PackageID}';");
            sb.Append($" listProduct.push(ModelProduct);");
        }
        sb.Append(" </script>");
        return sb.ToString();
    }
    string addListCustomer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        sb.Append("<script>");
        sb.Append(" var dataCustomer = new Array();");
        foreach (var item in listCustomer)
        {
            sb.Append($" dataCustomer.push('{item.Name}');");
        }
        sb.Append(" </script>");
        return sb.ToString();
    }
    string addCustomerModel()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        sb.Append("<script>");
        sb.Append("var listCustomer = new Array();");
        foreach(var item in listCustomer)
        {
            sb.Append(" var ModelCustomer = {};");
            sb.Append($" ModelCustomer.Name = '{item.Name}';");
            sb.Append($" ModelCustomer.Code = '{item.CustomerCode}';");
            sb.Append($" ModelCustomer.Address = '{item.Address}';");
            sb.Append($" ModelCustomer.Phone = '{item.Phone}';");
            sb.Append($"listCustomer.push(ModelCustomer);");
        }
        sb.Append("</script>");
        return sb.ToString();
    }
}
<div class="row">
    <h6>@TempData[InventoryManagerment.Common.CommonConstants.PAGE_NAME]</h6>
    <div class="input-group input-group-static my-3 is-filled">
        <label>Ngày nhập</label>
        <input type="datetime-local" id="txtTime" name="txtTime" class="form-control" value="@DateTime.Now" />
    </div>
    @if (user.RoleID == 1)
    {
        <div class="input-group input-group-static my-3 is-filled">
            <label>Khách hàng</label>
            <input id="txtCustomerName" type="text" class="form-control" placeholder="Nhập tên khách hàng" />
            <span onclick="showInfo()" style="cursor:pointer;" class="input-group-text" id="basic-addon2"><a href="javascript:;" data-bs-toggle="modal" data-bs-target="#exampleModal"><i title="tooltip" id="btnShowInfo" class="material-icons opacity-10">infor</i></a></span>
            <!-- Modal -->
            <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title font-weight-normal" id="exampleModalLabel"><i title="tooltip" id="btnShowInfo" class="material-icons opacity-10">person</i>Thông tin khách hàng</h5>
                            <button type="button" class="btn-close text-dark" data-bs-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div id="modalBody" class="modal-body">
                            
                        </div>
                    </div>
                </div>
            </div>  
        </div>
    }
    else
    {
        <div class="input-group input-group-static my-3 is-filled">
            <label>Khách hàng</label>
            <input value="Khách Vãng Lai" id="txtCustomerName" type="text" class="form-control" placeholder="Nhập tên khách hàng" disabled />
        </div>
    }
    <div class="input-group input-group-static my-3 is-filled">
        <label>Người giao</label>
        <input placeholder="Nhập tên người giao" type="text" id="txtDelivery" name="txtDelivery" class="form-control" />
    </div>
    <div class="input-group input-group-static my-3 is-filled">
        <label>Ghi chú</label>
        <textarea id="txtNote" name="txtNote" class="form-control" rows="5" placeholder="Nhập ghi chú"></textarea>
    </div>
</div>
<div class="row">
    <h6>Thêm sản phẩm</h6>
    <div class="col-md-3">
        <div class="input-group input-group-static my-3">
            <input class="form-control" placeholder="Nhập tên sản phẩm" id="txtProductName" />
        </div>
    </div>
    <div class="col-md-3">
        <div class="input-group input-group-static my-3">
            <input class="form-control" type="text" placeholder="Giá xuất" name="priceProduct" id="txtPrice" />
            <span class="input-group-text" id="basic-addon2">/ VNĐ</span>
        </div>
    </div>
    <div class="col-md-2">
        <div class="input-group input-group-static my-3">
            <input type="number" name="quantityProduct" placeholder="Số lượng" id="txtQuantity" class="form-control" />
        </div>
    </div>
    <div class="col-md-2">
        <div class="input-group input-group-static my-3">
            <select id="txtUnit" class="form-control">
                <option value="null">Chọn đơn vị tính</option>
                @foreach (var item in listUnit)
                {
                    <option value="@item.ID">@item.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="col-md-2">
        <input type="button" id="btnAddProduct" class="btn btn-primary" value="Thêm sản phẩm" />
    </div>
</div>
<div class="row">
    <h6>Danh sách sản phẩm</h6>
    <div class="card-body px-0 pb-2">
        <div class="table-responsive p-0    ">
            <table class="table align-items-center mb-0" id="tableProductRecord">
                <thead>
                    <tr>
                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Tên sản phẩm</th>
                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Giá xuất</th>
                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Số lượng</th>
                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Đơn vị tính</th>
                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Thành tiền</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </div>
</div>
<div class="row col-sm-2">
    <input type="button" id="btnSave" name="SaveData" value="Lưu Phiếu Xuất" class="btn btn-success" />
</div>
@section jsFooter{
    @Html.Raw(addProductModel())
    @Html.Raw(addListCustomer());
    @Html.Raw(addCustomerModel());
    <script>
        //Export
        $(document).ready(function () {
                $("#btnAddProduct").click(function () {
                    AddProductRecord();
                });
                $("#btnSave").click(function () {
                    SaveProduct();
                });
                SetTime();
                AutoComplete(dataProduct, $('#txtProductName'));
                AutoComplete(dataCustomer, $('#txtCustomerName'));
                $('#txtProductName').focusout(function () {
                    var text = $('#txtProductName').val();
                    var price = "0";
                    var unitid = "null";
                    var currentquantity = "0";
                    if (jQuery.inArray(text, dataProduct) != -1 || text == "") {
                        $('#txtProductName').val(text);
                        if ($('#txtPrice').val() == "" || $('#txtPrice').val() != "") {
                            var code = CheckName(getNameProduct(text), listProduct);
                            listProduct.forEach(element => {
                                if (element.CodeProduct == code) {
                                    price = element.Price;
                                    unitid = element.UnitID;
                                }
                            });
                            $('#txtPrice').val(formatNumber(price, '.', ','))
                        }
                        if ($('#txtQuantity').val() != "") {
                            quantity = $('#txtQuantity').val();
                            listProduct.forEach(item => {
                                if (item.Name == CheckName(getNameProduct(text), listProduct)) {
                                    currentquantity = item.Quantity;
                                }
                            });
                            if (parseInt(quantity) > parseInt(currentquantity)) {
                                if (parseInt(currentquantity) == 0) {
                                    $('div.container-fluid div.row:eq(1)').after('<div class="tatsau1s"><label><i class="material-icons text-sm">error</i>Sản phẩm này đã hết trong kho</label><div>');
                                    $('.tatsau1s').hide(3000, "linear");
                                    $('#txtQuantity').val("");
                                }
                                else {
                                    $('div.container-fluid div.row:eq(1)').after('<div class="tatsau1s"><label><i class="material-icons text-sm">error</i>Sản phẩm này chỉ còn ' + currentquantity + ' </label><div>');
                                    $('.tatsau1s').hide(3000, "linear");
                                    $('#txtQuantity').val(currentquantity);
                                }
                            }
                        }
                        $('#txtUnit').val(unitid);
                        $('#txtQuantity').focus();
                    }
                    else if (jQuery.inArray(text, dataProduct) == -1) {
                        $('#txtProductName').val("");
                        $('div.container-fluid div.row:eq(1)').after('<div class="tatsau1s"><label><i class="material-icons text-sm">error</i> Không có tên sản phẩm này vui lòng thử lại</label><div>');
                        $('.tatsau1s').hide(3000, "linear");
                    }
                });
                $('#txtQuantity').focusout(function () {
                    var quantity = $('#txtQuantity').val();
                    var nameproduct = $('#txtProductName').val();
                    var productcode = CheckName(getNameProduct(nameproduct), listProduct);
                    var currentquantity = "";
                    listProduct.forEach(item => {
                        if (item.CodeProduct == productcode) {
                            currentquantity = item.Quantity;
                        }
                    });
                    if (parseInt(quantity) > parseInt(currentquantity)) {
                        if (currentquantity == 0) {
                            $('div.container-fluid div.row:eq(1)').after('<div class="tatsau1s"><label><i class="material-icons text-sm">error</i>Sản phẩm này đã hết trong kho</label><div>');
                            $('.tatsau1s').hide(3000, "linear");
                            $('#txtQuantity').val("");
                        }
                        else {
                            $('div.container-fluid div.row:eq(1)').after('<div class="tatsau1s"><label><i class="material-icons text-sm">error</i>Sản phẩm này chỉ còn ' + currentquantity + ' </label><div>');
                            $('.tatsau1s').hide(3000, "linear");
                            $('#txtQuantity').val(currentquantity);
                        }
                    }
                    else {

                    }
                });
                $('#txtPrice').focusout(function () {
                    var text = $('#txtPrice').val();
                    if ($.isNumeric(text) || text.indexOf(',') != -1 || text == '') {
                        $('#txtPrice').val(formatNumber(text, '.', ','));
                    }
                    else if (!$.isNumeric(text)) {
                        $('#txtPrice').val("");
                        $('div.container-fluid div.row:eq(1)').after('<div class="tatsau1s"><label><i class="material-icons text-sm">error</i> Vui lòng nhập số</label><div>');
                        $('.tatsau1s').hide(3000, "linear");
                    }
                });
            });
        function showInfo() {
            var customerName = $("#txtCustomerName").val();
            var Name = "";
            var Phone = "";
            var Address = "";
            var count=0;
            listCustomer.forEach(element => {
                if (element.Name == customerName) {
                    Name = element.Name;
                    Phone = element.Phone;
                    Address = element.Address;
                    count++;
                }
            });
            if (count == 0) {
                $("#modalBody").html("");
                $("#modalBody").append("<h6>Không tìm thấy thông tin khách hàng này</h6>");
            }
            else {
                $("#modalBody").html("");
                $("#modalBody").append("<h6>Tên khách hàng:<p>" + Name + "</p></h6><h6>Số điện thoại:<p>" + Phone + "</p></h6><h6>Địa chỉ:<p>" + Address + "</p></h6>");
            }
        };
        function editproduct(element) {
            var row = $(element).closest("tr");
            var name = $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(5) a:eq(0)').find('i').html();
            if (name == 'edit') {
                var price = $('#tableProductRecord tbody tr:eq(' + row.index() + ')').find('td:eq(1)').html();
                var quantity = $('#tableProductRecord tbody tr:eq(' + row.index() + ')').find('td:eq(2)').html();
                var inputPrice = "<input type='text' value=" + price.replace(',', '') + ">";
                var inputQuantity = "<input type='number' value=" + quantity + ">";
                $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').html("");
                $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(2)').html("");
                $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').append(inputPrice);
                $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(2)').append(inputQuantity);
                $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(5)').find('a:eq(0)').html('<i class="material-icons">done</i>');
            }
            else {
                var price = $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').val();
                var quantity = $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(2)').find('input').val();
                var name = $('#tableProductRecord tbody tr:eq(' + row.index() + ')').find('td:eq(0)').html();
                var currentquantity = "0";
                listProduct.forEach(item => {
                    if (item.Name == name) {
                        currentquantity = item.Quantity;
                    }
                });
                if (parseInt(quantity) > parseInt(currentquantity)){
                    $.alert('Sản phẩm này chỉ còn ' + currentquantity + '');
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(2)').find('input').val(currentquantity);
                    return;
                }
                if (!$.isNumeric(price.replace(',',''))) {
                    $.alert("Vui lòng nhập số")
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').focus();
                    return;
                }
                var total = price.replace(',','') * quantity;
                $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').remove();
                $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(2)').find('input').remove();
                $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').html(formatNumber(price, '.', ','));
                $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(2)').html(quantity);
                $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(4)').html(formatNumber(total, '.', ','));
                $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(5)').find('a:eq(0)').html('<i class="material-icons">edit</i>');
            }
        };
        function CheckName(text, list) {
            var key = "";
            list.forEach(ModelProduct => {
                if (text == ModelProduct.Name) {
                    key = ModelProduct.CodeProduct;
                }
            });
            return key;
        };
        function AutoComplete(dataProduct, element) {
            element.autocomplete({
                source: dataProduct,
                minLength: 0,
            },
                {
                    autoFocus: true,
                    delay: 0,
                });
        }
        function SetTime() {
            const now = new Date();
            now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
            document.getElementById('txtTime').value = now.toISOString().slice(0, 16);
        }
        function formatNumber(nStr, decSeperate, groupSeperate) {
            nStr += '';
            x = nStr.split(decSeperate);
            x1 = x[0];
            x2 = x.length > 1 ? '.' + x[1] : '';
            var rgx = /(\d+)(\d{3})/;
            while (rgx.test(x1)) {
                x1 = x1.replace(rgx, '$1' + groupSeperate + '$2');
            }
            return x1 + x2;
        }
        function AddProductRecord() {
            if ($('#txtProductName').val().length == 0) {
                $.alert('Vui lòng nhập sản phẩm');
                $('#txtProductName').focus();
                return;
            }
            if ($("#txtPrice").val().length == 0) {
                $.alert('Vui lòng nhập giá sản phẩm');
                $('#txtProductCode').focus();
                return;
            }
            if ($("#txtQuantity").val().length == 0) {
                $.alert('Vui lòng nhập số lượng');
                $('#txtQuantity').focus();
                return
            }
            if ($("#txtUnit option:selected").val() == 'null') {
                $.alert('Vui lòng chọn đơn vị tính');
                $('#txtUnit').focus();
                return;
            }
            var temp = 0;
            $("#tableProductRecord tbody tr").each(function () {
                var name = $("#txtProductName").val();
                if ($(this).find("td:eq(0)").html() == name) {
                    temp += 1;
                }
            });
            if (temp > 0) {
                $.alert('Sản phẩm này đã tồn tại vui lòng kiểm tra lại');
                $('#txtProductName').focus();
                return;
            }
            var code = $('#txtProductName').val();
            var productCode = CheckName(getNameProduct(code), listProduct);
            var price = $("#txtPrice").val();
            var quantity = $("#txtQuantity").val();
            var total = formatNumber((price.replace(',', '') * quantity).toString(), '.', ',');
            var unit = $("#txtUnit option:selected").text();
            var unitID = $("#txtUnit option:selected").val();
            var productRecord = "<tr><td class=\"text-sm\"  id=" + productCode + ">" + code + "</td>" +
                "<td class=\"align-middle text-center text-sm\">" + formatNumber(price.toString(), '.', ',') + "</td>" +
                "<td class=\"align-middle text-center text-sm\">" + quantity + "</td>" +
                "<td class=\"align-middle text-center text-sm\" id=" + unitID + ">" + unit + "</td>" +
                "<td class=\"align-middle text-center text-sm\">" + total + "</td>" +
                "<td><a class=\"editproduct\" href =\"javascript:;\" onclick=\"editproduct(this)\"><i class=\"material-icons\">edit</i></a>" +
                "<a href=\"javascript:;\" onclick=\"this.closest('tr').remove()\"><i class=\"material-icons\">delete</i></a></td>" +
                +"</tr>";
            $("#tableProductRecord tbody").last().append(productRecord);
            $("#txtPrice").val("");
            $("#txtQuantity").val("");
            $("#txtUnit").prop('selectedIndex', 0);
            $("#txtProductName").val("");
            $("#txtProductName").focus();
        }
        function SaveProduct() {
            var listProduct = new Array();
            var table = $('#tableProductRecord tbody tr');
            var i = 0;
            table.each(function () {
                var name = $(this).find("td:eq(5)").find("a:eq(0)").find("i").html();
                if (name == "done") {
                    i++;
                    return;
                }
            });
            if (i > 0) {
                $.alert("Vui lòng hoàn tất việc chỉnh sửa");
                return;
            }
            table.each(function () {
                var Code = $(this).find("td:eq(0)").attr('id');
                var Price = $(this).find("td:eq(1)").text();
                var Quantity = $(this).find("td:eq(2)").text();
                var Delivery = $('#txtDelivery').val()
                var UnitID = $(this).find("td:eq(3)").attr('id');
                var Time = $("#txtTime").val();
                var Note = $("#txtNote").val();

                var nameCustomer = $('#txtCustomerName').val();
                var customerCode = GetCustomerName(listCustomer, nameCustomer);
                
                var ProductModel = {};
                ProductModel.CustomerCode = customerCode;
                ProductModel.NameCustomer = nameCustomer;
                ProductModel.Delivery = Delivery;
                ProductModel.Price = Price;
                ProductModel.Quantity = Quantity;
                ProductModel.ProductCode = Code;
                ProductModel.Time = Time;
                ProductModel.Note = Note;
                ProductModel.UnitID = UnitID;
                listProduct.push(ProductModel);
            });

            if (listProduct.length == 0) {
                $.alert('Vui lòng thêm ít nhất 1 sản phẩm');
                return;
            }

            $.ajax({
                async: true,
                type: 'POST',
                dataType: 'JSON',
                contentType: 'application/json; charset=utf=8',
                url: '/Export/Create/',
                data: JSON.stringify(listProduct),
                success: function () {
                    $("#txtPrice").val("");
                    $("#txtQuantity").val("");
                    $("#txtUnit").prop('selectedIndex', 0);
                    $("#txtSupplier").prop('selectedIndex', 0);
                    $("#txtNote").val("");
                    $("#txtDelivery").val("");
                    $("#txtCustomerName").val("");
                    $("#txtProductCode").prop('selectedIndex', 0);
                    $('#tableProductRecord tbody tr').each(function () {
                        $('#tableProductRecord tbody').find('tr').remove();
                    });
                    SetTime();
                    //var obj = $.alert({
                    //    title: 'Thông báo',
                    //    content: 'Thêm phiếu xuất thành công',
                    //});
                    //setTimeout(function () {
                    //    obj.close();
                    //}, 2000);
                    location.reload(true);
                },
                error: function () {
                    $.alert({
                        title: 'Thông báo',
                        content: 'Lỗi',
                    })
                }
            })
        }
        function GetCustomerName(listCustomer,nameCustomer) {
            var code = "";
            listCustomer.forEach(element => {
                if (element.Name == nameCustomer) {
                    code = element.Code;
                }
            });
            return code;
        }
    </script>
    @Html.Raw(addListProduct())
}