@{
    //Refund Create
    Layout = "~/Views/Shared/_Layout.cshtml";
    var listProduct = (List<InventoryManagerment.Models.EF.Product>)ViewBag.Product;
    var listUnit = (List<InventoryManagerment.Models.EF.Unit>)ViewBag.Unit;
    var listCustomer = (List<InventoryManagerment.Models.EF.Customer>)ViewBag.Customer;
    var user = (InventoryManagerment.Models.EF.User)Session[InventoryManagerment.Common.CommonConstants.USER_SESSION];
    var db = new InventoryManagerment.Models.EF.InventoryDbContext();
    var listCategory = db.ProductCategories.ToList();
    var listPackage = db.Packages.ToList();
    string addListProduct()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        sb.Append("<script>");
        sb.Append(" var dataProduct = new Array();");
        foreach (var item in listProduct)
        {
            sb.Append($" dataProduct.push('{db.ProductCategories.Find(item.CategoryID).Name} | {item.Name} | {db.Packages.Find(item.PackageID).Name}');");
        }
        sb.Append(" </script>");
        return sb.ToString();
    }
    string addProductModel()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        sb.Append("<script>");
        sb.Append(" var listProduct = new Array();");
        foreach (var item in listProduct)
        {
            sb.Append(" var ModelProduct = {};");
            sb.Append($" ModelProduct.Name ='{item.Name}';");
            sb.Append($" ModelProduct.CodeProduct='{item.Code}';");
            sb.Append($" ModelProduct.Quantity='{item.Quantity}';");
            sb.Append($" ModelProduct.Price ='{getPriceRefund(item.Code)}';");
            sb.Append($" ModelProduct.UnitID ='{item.UnitID}';");
            sb.Append($" ModelProduct.PackageName ='{db.Packages.Find(item.PackageID).Name}';");
            sb.Append($" listProduct.push(ModelProduct);");
        }
        sb.Append(" </script>");
        return sb.ToString();
    }
    string addListCustomer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        sb.Append("<script>");
        sb.Append(" var dataCustomer = new Array();");
        foreach (var item in listCustomer)
        {
            sb.Append($" dataCustomer.push('{item.Name}');");
        }
        sb.Append(" </script>");
        return sb.ToString();
    }
    string addCustomerModel()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        sb.Append("<script>");
        sb.Append("var listCustomer = new Array();");
        foreach (var item in listCustomer)
        {
            sb.Append(" var ModelCustomer = {};");
            sb.Append($" ModelCustomer.Name = '{item.Name}';");
            sb.Append($" ModelCustomer.Code = '{item.CustomerCode}';");
            sb.Append($" ModelCustomer.Address = '{item.Address}';");
            sb.Append($" ModelCustomer.Phone = '{item.Phone}';");
            sb.Append($"listCustomer.push(ModelCustomer);");
        }
        sb.Append("</script>");
        return sb.ToString();
    }
    decimal getPriceRefund(string code)
    {
        decimal tongtien = 0;
        var listproductx = db.ImportDetails.Where(x => x.ProductCode == code && x.ImportDetailDelete==false).ToList();
        if (listproductx.Count != 0)
        {
            foreach (var item in listproductx)
            {
                tongtien += item.ImportPrice;
            }
            return Math.Round(tongtien / listproductx.Count,0);
        }
        else
        {
            return 0;
        }
    }
}
<div class="row">
    <h6>@TempData[InventoryManagerment.Common.CommonConstants.PAGE_NAME]</h6>
    <div class="input-group input-group-static my-3 is-filled">
        <label>Ngày trả</label>
        <input type="datetime-local" id="txtTime" name="txtTime" class="form-control" value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
    </div>
    @if (user.RoleID == 1)
    {
        <div class="input-group input-group-static my-3 is-filled">
            <label>Khách hàng</label>
            <input id="txtCustomerName" type="text" class="form-control" placeholder="Nhập tên khách hàng" />
            <span onclick="showInfo()" style="cursor:pointer;" class="input-group-text" id="basic-addon2"><i title="tooltip" id="btnShowInfo" class="material-icons opacity-10">infor</i></span>
        </div>
    }
    else
    {
        <div class="input-group input-group-static my-3 is-filled">
            <label>Khách hàng</label>
            <input id="txtCustomerName" type="text" value="Khách Vãng Lai" class="form-control" placeholder="Nhập tên khách hàng" disabled />
            <span onclick="showInfo()" style="cursor:pointer;" class="input-group-text" id="basic-addon2"><i title="tooltip" id="btnShowInfo" class="material-icons opacity-10">infor</i></span>
        </div>
    }
    <div class="input-group input-group-static my-3 is-filled">
        <label>Ghi chú</label>
        <textarea id="txtNote" name="txtNote" class="form-control" rows="5" placeholder="Nhập ghi chú"></textarea>
    </div>
</div>
<div class="row">
    <h6>Thêm sản phẩm</h6>
    <div class="col-md-3">
        <div class="input-group input-group-static my-3">
            <input class="form-control" placeholder="Nhập tên sản phẩm" id="txtProductName" />
        </div>
    </div>
    <div class="col-md-3">
        <div class="input-group input-group-static my-3">
            <input class="form-control" type="text" placeholder="Giá xuất" name="priceProduct" id="txtPrice" />
            <span class="input-group-text" id="basic-addon2">/ VNĐ</span>
        </div>
    </div>
    <div class="col-md-2">
        <div class="input-group input-group-static my-3">
            <input type="number" name="quantityProduct" placeholder="Số lượng" id="txtQuantity" class="form-control" />
        </div>
    </div>
    <div class="col-md-2">
        <div class="input-group input-group-static my-3">
            <select id="txtUnit" class="form-control">
                <option value="null">Chọn đơn vị tính</option>
                @foreach (var item in listUnit)
                {
                    <option value="@item.ID">@item.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="col-md-2">
        <input type="button" id="btnAddProduct" class="btn btn-primary" value="Thêm sản phẩm" />
    </div>
</div>
<div class="row">
    <h6>Danh sách sản phẩm</h6>
    <div class="card-body px-0 pb-2">
        <div class="table-responsive p-0    ">
            <table class="table align-items-center mb-0" id="tableProductRecord">
                <thead>
                    <tr>
                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Tên sản phẩm</th>
                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Giá xuất</th>
                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Số lượng</th>
                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Đơn vị tính</th>
                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Thành tiền</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </div>
</div>
<div class="row col-sm-2">
    <input type="button" id="btnSave" name="SaveData" value="Lưu Phiếu Trả" class="btn btn-success" />
</div>
<!-- Modal AddProduct -->
<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title font-weight-normal" id="productModalLabel">Thêm sản phẩm mới</h5>
                <button type="button" class="btn-close text-dark" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="input-group input-group-static my-3">
                    <label>Tên sản phẩm</label>
                    <input id="txtNameProduct" class="form-control" />
                </div>

                <div class="input-group input-group-static my-3">
                    <label>Loại sản phẩm</label>
                    <select id="txtCategoryID" class="form-control">
                        @foreach (var item in listCategory)
                        {
                            <option value="@item.ID">@item.Name</option>
                        }
                    </select>
                </div>

                <div class="input-group input-group-static my-3">
                    <label>Giá</label>
                    <input class="form-control" id="txtPriceProduct" />
                </div>

                <div class="input-group input-group-static my-3">
                    <label>Đơn vị tính</label>
                    <select class="form-control" id="txtUnitProduct">
                        @foreach (var item in listUnit)
                        {
                            <option value="@item.ID">@item.Name</option>
                        }
                    </select>
                </div>

                <div class="input-group input-group-static my-3">
                    <label>Cách đóng gói</label>
                    <select class="form-control" id="txtPackageProduct">
                        @foreach (var item in listPackage)
                        {
                            <option value="@item.ID">@item.Name</option>
                        }
                    </select>
                </div>

                <div style="margin-top:40px !important;" class="input-group input-group-static my-3">
                    <label>Số lượng tối thiểu</label>
                    <input class="form-control" id="txtAlertQuantity" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Đóng</button>
                    <button id="btnSaveProduct" type="submit" data-bs-dismiss="modal" class="btn bg-gradient-primary">Lưu sản phẩm</button>
                </div>
            </div>
        </div>
    </div>
</div>
@section jsFooter{
    @Html.Raw(addProductModel())
    @Html.Raw(addListCustomer());
    @Html.Raw(addCustomerModel());
<script>
                //Refund
                $(document).ready(function () {
                    $("#btnAddProduct").click(function () {
                        AddProductRecord();
                    });
                    $("#btnSave").click(function () {
                        SaveProduct();
                    });
                    $("#btnSaveProduct").click(function () {
                        AddNewProduct();
                    });
                    AutoComplete(dataProduct, $('#txtProductName'));
                    AutoComplete(dataCustomer, $('#txtCustomerName'));
                    $('#txtProductName').focusout(function () {
                        var text = $('#txtProductName').val();
                        var price = "0";
                        var unitid = "null";
                        if (jQuery.inArray(text, dataProduct) != -1 || text == "") {
                            $('#txtProductName').val(text);
                            if ($('#txtPrice').val() == "" || $('#txtPrice').val() != "") {
                                var code = CheckName(getNameProduct(text),getPackageProduct(text), listProduct);
                                listProduct.forEach(element => {
                                    if (element.CodeProduct == code) {
                                        price = element.Price;
                                        unitid = element.UnitID;
                                    }
                                });
                            }
                            $('#txtPrice').val(formatNumber(price, '.', ','))
                            $('#txtUnit').val(unitid);
                            $('#txtQuantity').focus();
                        }
                        else if (jQuery.inArray(text, dataProduct) == -1) {
                            $('div.container-fluid div.row:eq(1)').after('<div class="tatsau1s"><label><i class="material-icons text-sm">error</i> Không có tên sản phẩm này bạn có muốn thêm mới không ? <a onclick="setName()" href="javascript:;" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#productModal">Thêm mới</a>  <a class="btn btn-primary btn-sm" href="javascript:;" onclick ="hideAlert()">X</a></label><div>');
                        }
                    });
                    $('#txtQuantity').focusout(function () {
                        var text = $('#txtQuantity').val();
                        if ($.isNumeric(text) || text.indexOf(',') != -1 || text == '') {

                        }
                        else if (!$.isNumeric(text)) {
                            $('#txtPrice').val("");
                            $('div.container-fluid div.row:eq(1)').after('<div class="tatsau1s"><label><i class="material-icons text-sm">error</i> Vui lòng nhập số</label><div>');
                            $('.tatsau1s').hide(3000, "linear");
                        }
                    });
                    $('#txtPrice').focusout(function () {
                        var text = $('#txtPrice').val();
                        if ($.isNumeric(text) || text.indexOf(',') != -1 || text == '') {
                            $('#txtPrice').val(formatNumber(text, '.', ','));
                        }
                        else if (!$.isNumeric(text)) {
                            $('#txtPrice').val("");
                            $('div.container-fluid div.row:eq(1)').after('<div class="tatsau1s"><label><i class="material-icons text-sm">error</i> Vui lòng nhập số</label><div>');
                            $('.tatsau1s').hide(3000, "linear");
                        }
                    });
                });
            function showInfo() {
                $('#txtCustomerName').tooltip({
                    content: "<strong>Hi!</strong>",
                    track: true
                });
            };
            function editproduct(element) {
                var row = $(element).closest("tr");
                var name = $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(5) a:eq(0)').find('i').html();
                if (name == 'edit') {
                    var price = $('#tableProductRecord tbody tr:eq(' + row.index() + ')').find('td:eq(1)').html();
                    var quantity = $('#tableProductRecord tbody tr:eq(' + row.index() + ')').find('td:eq(2)').html();
                    var inputPrice = "<input type='text' value=" + price.replace(',', '') + ">";
                    var inputQuantity = "<input type='number' value=" + quantity + ">";
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').html("");
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(2)').html("");
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').append(inputPrice);
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(2)').append(inputQuantity);
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(5)').find('a:eq(0)').html('<i class="material-icons">done</i>');
                }
                else {
                    var price = $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').val();
                    var quantity = $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(2)').find('input').val();
                    var name = $('#tableProductRecord tbody tr:eq(' + row.index() + ')').find('td:eq(0)').html();
                    var currentquantity = "0";
                    listProduct.forEach(item => {
                        if (item.Name == name) {
                            currentquantity = item.Quantity;
                        }
                    });
                    if (!$.isNumeric(price.replace(',', ''))) {
                        $.alert("Vui lòng nhập số")
                        $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').focus();
                        return;
                    }
                    var total = price.replace(',', '') * quantity;
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').remove();
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(2)').find('input').remove();
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').html(formatNumber(price, '.', ','));
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(2)').html(quantity);
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(4)').html(formatNumber(total, '.', ','));
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(5)').find('a:eq(0)').html('<i class="material-icons">edit</i>');
                }
            };
            function CheckName(text,package,list) {
                var key = "";
                list.forEach(ModelProduct => {
                    if (text == ModelProduct.Name && ModelProduct.PackageName == package) {
                        key = ModelProduct.CodeProduct;
                    }
                });
                return key;
            }
            function AutoComplete(dataProduct, element) {
                element.autocomplete({
                    source: dataProduct,
                    minLength: 0,
                },
                    {
                        autoFocus: true,
                        delay: 0,
                    });
            }
            function formatNumber(nStr, decSeperate, groupSeperate) {
                nStr += '';
                x = nStr.split(decSeperate);
                x1 = x[0];
                x2 = x.length > 1 ? '.' + x[1] : '';
                var rgx = /(\d+)(\d{3})/;
                while (rgx.test(x1)) {
                    x1 = x1.replace(rgx, '$1' + groupSeperate + '$2');
                }
                return x1 + x2;
            }
            function AddProductRecord() {
                if ($('#txtProductName').val().length == 0) {
                    $.alert('Vui lòng nhập sản phẩm');
                    $('#txtProductName').focus();
                    return;
                }
                if ($("#txtPrice").val().length == 0) {
                    $.alert('Vui lòng nhập giá sản phẩm');
                    $('#txtProductCode').focus();
                    return;
                }
                if ($("#txtQuantity").val().length == 0) {
                    $.alert('Vui lòng nhập số lượng');
                    $('#txtQuantity').focus();
                    return
                }
                if ($("#txtUnit option:selected").val() == 'null') {
                    $.alert('Vui lòng chọn đơn vị tính');
                    $('#txtUnit').focus();
                    return;
                }
                var temp = 0;
                $("#tableProductRecord tbody tr").each(function () {
                    var name = $("#txtProductName").val();
                    if ($(this).find("td:eq(0)").html() == name) {
                        temp += 1;
                    }
                });
                if (temp > 0) {
                    $.alert('Sản phẩm này đã tồn tại vui lòng kiểm tra lại');
                    $('#txtProductName').focus();
                    return;
                }
                var code = $('#txtProductName').val();
                var productCode = CheckName(getNameProduct(code), getPackageProduct(code), listProduct);
                var price = $("#txtPrice").val();
                var quantity = $("#txtQuantity").val();
                var total = formatNumber((price.replace(',', '') * quantity).toString(), '.', ',');
                var unit = $("#txtUnit option:selected").text();
                var unitID = $("#txtUnit option:selected").val();
                var productRecord = "<tr><td class=\"text-sm\"  id=" + productCode + ">" + code + "</td>" +
                    "<td class=\"align-middle text-center text-sm\">" + formatNumber(price.toString(), '.', ',') + "</td>" +
                    "<td class=\"align-middle text-center text-sm\">" + quantity + "</td>" +
                    "<td class=\"align-middle text-center text-sm\" id=" + unitID + ">" + unit + "</td>" +
                    "<td class=\"align-middle text-center text-sm\">" + total + "</td>" +
                    "<td><a class=\"editproduct\" href =\"javascript:;\" onclick=\"editproduct(this)\"><i class=\"material-icons\">edit</i></a>" +
                    "<a href=\"javascript:;\" onclick=\"this.closest('tr').remove()\"><i class=\"material-icons\">delete</i></a></td>" +
                    +"</tr>";
                $("#tableProductRecord tbody").last().append(productRecord);
                $("#txtPrice").val("");
                $("#txtQuantity").val("");
                $("#txtUnit").prop('selectedIndex', 0);
                $("#txtProductName").val("");
                $("#txtProductName").focus();
            }
            function SaveProduct() {
                var listProduct = new Array();
                var table = $('#tableProductRecord tbody tr');
                var i = 0;
                table.each(function () {
                    var name = $(this).find("td:eq(5)").find("a:eq(0)").find("i").html();
                    if (name == "done") {
                        i++;
                        return;
                    }
                });
                if (i > 0) {
                    $.alert("Vui lòng hoàn tất việc chỉnh sửa");
                    return;
                }
                table.each(function () {
                    var Code = $(this).find("td:eq(0)").attr('id');
                    var Price = $(this).find("td:eq(1)").text();
                    var Quantity = $(this).find("td:eq(2)").text();
                    var UnitID = $(this).find("td:eq(3)").attr('id');
                    var Time = $("#txtTime").val();
                    var Note = $("#txtNote").val();

                    var nameCustomer = $('#txtCustomerName').val();
                    var customerCode = GetCustomerName(listCustomer, nameCustomer);

                    var ProductModel = {};
                    ProductModel.CustomerCode = customerCode;
                    ProductModel.NameCustomer = nameCustomer;
                    ProductModel.Price = Price;
                    ProductModel.Quantity = Quantity;
                    ProductModel.ProductCode = Code;
                    ProductModel.Time = Time;
                    ProductModel.Note = Note;
                    ProductModel.UnitID = UnitID;
                    listProduct.push(ProductModel);
                });
                if ($('#txtCustomerName').val().length == 0) {
                    $.alert('Vui lòng nhập tên khách hàng');
                    $('#txtCustomerName').focus();
                    return;
                }
                if (listProduct.length == 0) {
                    $.alert('Vui lòng thêm ít nhất 1 sản phẩm');
                    return;
                }

                $.ajax({
                    async: true,
                    type: 'POST',
                    dataType: 'JSON',
                    contentType: 'application/json; charset=utf=8',
                    url: '/Refund/Create/',
                    data: JSON.stringify(listProduct),
                    success: function () {
                        $("#txtPrice").val("");
                        $("#txtQuantity").val("");
                        $("#txtUnit").prop('selectedIndex', 0);
                        $("#txtSupplier").prop('selectedIndex', 0);
                        $("#txtNote").val("");
                        $("#txtDelivery").val("");
                        $("#txtCustomerName").val("");
                        $("#txtProductCode").prop('selectedIndex', 0);
                        $('#tableProductRecord tbody tr').each(function () {
                            $('#tableProductRecord tbody').find('tr').remove();
                        });
                        location.reload(true);
                    },
                    error: function () {
                        $.alert({
                            title: 'Thông báo',
                            content: 'Lỗi',
                        })
                    }
                })
            }
            function GetCustomerName(listCustomer, nameCustomer) {
                var code = "";
                listCustomer.forEach(element => {
                    if (element.Name == nameCustomer) {
                        code = element.Code;
                    }
                });
                return code;
        }
            function setName() {
            var name = $('#txtProductName').val();
            $('#txtNameProduct').val(name);
        }
            function hideAlert() {
            $('.tatsau1s').hide(1000, "linear");
        }
            function ClearState() {
            $('#txtNameProduct').val("");
            $("#txtCategoryID").prop('selectedIndex', 0);
            $('#txtPriceProduct').val("");
            $("#txtUnitProduct").prop('selectedIndex', 0);
            $("#txtPackageProduct").prop('selectedIndex', 0);
            $('#txtAlertQuantity').val("");
        }
            function AddModelProduct(name, code, quantity, price, unitID, packageID, listProduct) {
                var ModelProduct = {};
                ModelProduct.Name = name;
                ModelProduct.CodeProduct = code;
                ModelProduct.Quantity = quantity;
                ModelProduct.Price = price;
                ModelProduct.UnitID = unitID;
                ModelProduct.PackageID = packageID;
                listProduct.push(ModelProduct);
        }
            function AddAutocomplete(text, dataProduct) {
                dataProduct.push(text)
            }
            function AddNewProduct() {
                var nameProduct = $('#txtNameProduct').val();
                var categoryID = $('#txtCategoryID option:selected').val();
                var priceProduct = $('#txtPriceProduct').val();
                var code = '@InventoryManagerment.Common.Functions.CreateCode("SP")';
                var unitID = $('#txtUnitProduct option:selected').val();
                var categoryName = $('#txtCategoryID option:selected').text();
                var packageName = $('#txtPackageProduct option:selected').text();
                var packageID = $('#txtPackageProduct option:selected').val();
                var quantityAlert = $('#txtAlertQuantity').val();
                var product = {};
                product.Code = code
                product.Name = nameProduct;
                product.CategoryID = categoryID;
                product.Price = priceProduct;
                product.UnitID = unitID;
                product.PackageID = packageID;
                product.QuantityAlert = quantityAlert;
                $.ajax({
                    async: true,
                    type: 'POST',
                    dataType: 'JSON',
                    contentType: 'application/json; charset=utf=8',
                    url: '/Import/CreateProduct/',
                    data: JSON.stringify(product),
                    success: function () {
                        $.alert("Thêm sản phẩm thành công");
                        ClearState();
                        AddModelProduct(nameProduct, code, 0, 0, unitID, packageID, listProduct);
                        var tensanpham = categoryName.trim() + " | " + nameProduct.trim() + " | " + packageName.trim();
                        AddAutocomplete(tensanpham.trim(), dataProduct);
                        hideAlert();
                        $('#txtProductName').val(tensanpham.trim());
                        $('#txtProductName').focus();
                    },
                    error: function () {
                        $.alert("Thêm sản phẩm thất bại");
                    }
                });
            };
</script>
    @Html.Raw(addListProduct())
}